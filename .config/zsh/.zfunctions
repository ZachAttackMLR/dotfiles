# Zach Gorman's .zfunctions

# fzf {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fo() {
  local files
  IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fman [FUZZY PATTERN] - Search man pages.
fman() {
	man -k . | fzf --prompt='Man> ' | awk '{print $1}' | cut -d "(" -f1 | xargs man
}

# macOS fuzzy app launcher
launch() {
	open -a "`find /Applications -name '*app' -maxdepth 1 | cut -d'/' -f 3 | cut -d'.' -f 1 | fzf --query=$1`"
}

# macOS fuzzy stystem app launcher
syslaunch() {
	open -a "`find /System/Applications -name '*app' -maxdepth 1 | cut -d'/' -f 4 | cut -d'.' -f 1 | fzf --query=$1`"
}

# END fzf }}}

# Dotfiles {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# Grab dotfiles list from shallow-backup config and throw it in a fzf selector for editing
function dots() {
	cat ~/.config/shallow-backup.conf | jq '.dotfiles' | jq -r '.[]' | fzf --bind "enter:execute(nvim ~/{})"
}

# backup-dots [COMMIT MESSAGE]
function backup-dots() {
	echo "Backing up..."
	(
	shallow-backup -no_splash -dotfiles -separate_dotfiles_repo;
	cd "$HOME/shallow-backup/dotfiles/" || exit
	git add .

	# If no commit message is provided, open vim.
	# Otherwise, commit with the provided message
	commit_msg="$1"
	if [ -z "$commit_msg" ] ; then
		git commit --verbose
	else
		git commit -m "$commit_msg"
	fi
	git push
	)
}

# END Dotfiles }}}

# Shortcuts {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# Make a directory and cd into it.
function mk() {
  mkdir "$1" && cd "$1" || exit;
}

# Copy file contents to clipboard
function copy() {
  if [ "$OS" = "Darwin" ]; then
    pbcopy < "$1"
  elif [ "$OS" = "Linux" ]; then
    xsel -i < "$1"
  fi
}

function cheat() {
  curl cheat.sh/$1
}

# Prettier diffs
function pdiff() {
  diff -u $1 $2 | diff-so-fancy
}

# END Shortcuts }}}

# tmux {{{

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# END tmux }}}

# ranger {{{

# cd on exit from ranger with q
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

# END ranger }}}

# Everything above this line is stolen, everything below is original

# Sound Stuff {{{

# volume needs to be [0,100] in set of integers
function set_volume {
	osascript -e "set volume output volume $1"
}

function mute_vol {
	mutestate=$(osascript -e "output muted of (get volume settings)")
	if $mutestate == "true"; then
		osascript -e 'set volume output muted false'; echo 'Volume Unmuted'
	else osascript -e 'set volume output muted true'; echo 'Volume Muted'
	fi
}

# END Sound Stuff }}}

# arch stuff {{{

# TODO: Make this less heinous. Just use for loop to go through divs
# inspired by https://www.reddit.com/r/archlinux/comments/g6lxct/getting_the_latest_arch_linux_news_entry/
function archnews() {
   curl -s https://www.archlinux.org/ | xmllint --html --xpath '//div[@id="news"]/div[1]' -  | pandoc -f html -t plain
   echo -e '\n\n'
   curl -s https://www.archlinux.org/ | xmllint --html --xpath '//div[@id="news"]/div[2]' -  | pandoc -f html -t plain
   echo -e '\n\n'
   curl -s https://www.archlinux.org/ | xmllint --html --xpath '//div[@id="news"]/div[3]' -  | pandoc -f html -t plain
   echo -e '\n\n'
   curl -s https://www.archlinux.org/ | xmllint --html --xpath '//div[@id="news"]/div[4]' -  | pandoc -f html -t plain
}

# arch stuff }}}

# Ansiweather Forecast {{{

# I didn't like that I couldn't display the current weather and the forecast in
# different ways, so I scripted a way to do it.
# Also, sed on macOS is different than other sed implementations, so it looks
# a bit funky.
function forecast() {
	ansiweather -F | sed 's/:/:\
   /' | sed 's/|/\
   /g'
}

# END Ansiweather Forecast }}}

# Pretty CSV Viewer {{{

function prettycsv() {
  cat $1 | sed 's/,/ ,/g' | column -t -s, | bat
}

# END Pretty CSV Viewer }}}

# START Time Machine Info {{{

# Inspired by:
# https://apple.stackexchange.com/questions/162464/time-machine-progress-from-the-command-line
# If anybody ever looks at these, don't use this. It's not exactly functional.
# FIXME displays wrong info 3/4 of the time
function backup-info() {
  TMPHASE=`tmutil currentPhase`
  if [ "BackupNotRunning" == "$TMPHASE" ]
  then
    ENCRYPTSTATUS=`diskutil cs list | awk '/Conversion Status/ {print $3}'`
    if [ "Complete" == "$ENCRYPTSTATUS" ]
    then
      echo '\033[0;32mBackup not running, and encryption complete.\033[0m'

    else
      ENCRYPTPCT=`diskutil cs list | awk '/Conversion Progress/ {print $3}'`
      echo "\033[0;34mBackup done, encryption $ENCRYPTPCT done"
      echo '\033[0m'
    fi

  elif [ "Starting" == "$TMPHASE" ]
  then
    echo '\033[0;34mStarting the back up. Check again soon for progress.\033[0m'

  elif [ "ThinningPreBackup" == "$TMPHASE" ]
  then
    echo '\033[0;34mThinning before backing up. Check again soon.\033[0m'

  elif [ "Copying" == "$TMPHASE" ]
  then
    TMPCT=`tmutil status | awk '/_raw_Percent/ {print $3}' | grep -o '[0-9].[0-9]\+' | awk '{print $1*100}'`
    echo '\n\033[0;34mBacking up...\033[0m\n'
    if [ -z "$TMPCT" ]
    then
      echo "\033[;32m0% or 100% complete. Run again soon for a legitimate answer."
      echo '\033[0m'
    else
      echo "\033[0;32m$TMPCT% completed.\033[0m"
    fi

  elif [ "Finishing" == "$TMPHASE" ]
  then
    echo "\033[0;32mBackup finishing up!"
    echo '\033[0m'

  else
    echo 'Unknown Phase. Try again soon.'
  fi
}

# END Time Machine Info }}}

# vim: set filetype=zsh foldmethod=marker:
