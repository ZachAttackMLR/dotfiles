# Zach Gorman's .zfunctions

# fzf integrations {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
function fo() {
  local files
  IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fman [FUZZY PATTERN] - Search man pages.
function fman() {
	man -k . | fzf --prompt='Man> ' | awk '{print $1}' | cut -d "(" -f1 | xargs man
}

# macOS fuzzy app launcher
function launch() {
  open -a "$(find /Applications /System/Applications/ /System/Applications/Utilities -name '*app' -maxdepth 1 -exec basename {} .app \; | fzf --query "$1")"
}

# END fzf }}}

# Dotfiles {{{

# Grab dotfiles list from shallow-backup config and throw it in a fzf selector for editing
function dots() {
  cat ~/.config/shallow-backup.conf | jq '.dotfiles' | jq 'keys' | jq -r '.[]' | fzf --bind "enter:execute(nvim ~/{})"
}

# END Dotfiles }}}

# Shortcuts {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# Make a directory and cd into it.
function mk() {
  mkdir "$1" && cd "$1" || exit;
}

# Copy file contents to clipboard
function copy() {
  if [ "$OS" = "Darwin" ]; then
    pbcopy < "$1"
  elif [ "$OS" = "Linux" ]; then
    xclip -sel clip < "$1"
  fi
}

function cheat() {
  curl cheat.sh/$1
}

# Prettier diffs
function pdiff() {
  diff -u $1 $2 | diff-so-fancy
}

function repo {
  gitit repo $(echo "$1" | tr "/" " ")
}

function stopwatch {
  date1=`date +%s`
  while true; do
    echo -ne "$(date -u --date @$((`date +%s` - $date1)) +%H:%M:%S)\r"
    sleep 0.1
  done
}

function timer {
  date1=$((`date +%s` + $1))
  while [ "$date1" -ge `date +%s` ]; do
    echo -ne "$(date -u --date @$(($date1 - `date +%s`)) +%H:%M:%S)\r";
    sleep 0.1
  done
}

# Work Shortcuts {{{

# Clone and configure work managed repos using my work github account's ssh config and key
function workclone {
  git clone github-pg:procter-gamble/"$1".git
  cd $1 && git config user.email "gorman.zj@pg.com"
}

function newworkrepo {
  git init && git config user.email "gorman.zj@pg.com"
  ga . && gc -m "init commit"
  git remote add origin git@github-pg:procter-gamble/$1.git
  git push origin master
}

# MFA needed to log in to corporate AWS, so run the python script to do so
function awsmfa {
  getp "pg.com"
  ( # start subshell
  cd $HOME/docs/repos/work/others/aws-cli-federation-mfa/
  python aws_ping_login.py --config "$AWS_SHARED_CREDENTIALS_FILE"
  )
}

function previewdynamo {
  for i in {0..4}; do
    aws dynamodb query --table-name "$1" \
                       --key-condition-expression "$2 = :a and $3 = :b" \
                       --expression-attribute-values \
                         "{\":a\":{\"S\":\"$4\"},\":b\":{\"S\":\"$5\"}}"\
    | jq -r ".Items[0].data.L[$i].M"
  done
}

# END Work Shortcuts }}}
# END Shortcuts }}}

# tmux {{{

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

function tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# END tmux }}}

# ranger {{{

# cd on exit from ranger with q
function ranger {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

# END ranger }}}

# Sound Stuff {{{

# volume needs to be [0,100] in set of integers
function set_volume {
	osascript -e "set volume output volume $1"
}

function mute_vol {
	mutestate=$(osascript -e "output muted of (get volume settings)")
	if $mutestate == "true"; then
		osascript -e 'set volume output muted false'; echo 'Volume Unmuted'
	else osascript -e 'set volume output muted true'; echo 'Volume Muted'
	fi
}

# END Sound Stuff }}}

# Ansiweather Forecast {{{

# I didn't like that I couldn't display the current weather and the forecast in
# different ways, so I scripted a way to do it.
# Also, sed on macOS is different than other sed implementations, so it looks
# a bit funky.
function forecast() {
	ansiweather -F | sed 's/:/:\
   /' | sed 's/|/\
   /g'
}

# END Ansiweather Forecast }}}

# Pretty CSV Viewer {{{

function prettycsv() {
  cat $1 | sed 's/,/ ,/g' | column -t -s, | bat
}

# END Pretty CSV Viewer }}}

# Time Machine Info {{{

# Inspired by:
# https://apple.stackexchange.com/questions/162464/time-machine-progress-from-the-command-line
# If anybody ever looks at these, don't use this. It's not exactly functional.
# FIXME displays wrong info 3/4 of the time
function backup-info() {
  TMPHASE=`tmutil currentPhase`
  if [ "BackupNotRunning" == "$TMPHASE" ]
  then
    ENCRYPTSTATUS=`diskutil cs list | awk '/Conversion Status/ {print $3}'`
    if [ "Complete" == "$ENCRYPTSTATUS" ]
    then
      echo '\033[0;32mBackup not running, and encryption complete.\033[0m'

    else
      ENCRYPTPCT=`diskutil cs list | awk '/Conversion Progress/ {print $3}'`
      echo "\033[0;34mBackup done, encryption $ENCRYPTPCT done"
      echo '\033[0m'
    fi

  elif [ "Starting" == "$TMPHASE" ]
  then
    echo '\033[0;34mStarting the back up. Check again soon for progress.\033[0m'

  elif [ "ThinningPreBackup" == "$TMPHASE" ]
  then
    echo '\033[0;34mThinning before backing up. Check again soon.\033[0m'

  elif [ "Copying" == "$TMPHASE" ]
  then
    TMPCT=`tmutil status | awk '/_raw_Percent/ {print $3}' | grep -o '[0-9].[0-9]\+' | awk '{print $1*100}'`
    echo '\n\033[0;34mBacking up...\033[0m\n'
    if [ -z "$TMPCT" ]
    then
      echo "\033[;32m0% or 100% complete. Run again soon for a legitimate answer."
      echo '\033[0m'
    else
      echo "\033[0;32m$TMPCT% completed.\033[0m"
    fi

  elif [ "Finishing" == "$TMPHASE" ]
  then
    echo "\033[0;32mBackup finishing up!"
    echo '\033[0m'

  else
    echo 'Unknown Phase. Try again soon.'
  fi
}

# END Time Machine Info }}}

# vim: set filetype=zsh foldmethod=marker:
