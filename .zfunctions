# Zach Gorman's .zfunctions

# fzf {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# fo [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fo() {
  local files
  IFS=$'\n' files=($(fzf --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fman [FUZZY PATTERN] - Search man pages.
fman() {
	man -k . | fzf --prompt='Man> ' | awk '{print $1}' | cut -d "(" -f1 | xargs man
}

# macOS fuzzy app launcher
launch() {
	open -a "`find /Applications -name '*app' -maxdepth 1 | cut -d'/' -f 3 | cut -d'.' -f 1 | fzf --query=$1`"
}

# END fzf }}}

# Dotfiles {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# Grab dotfiles list from shallow-backup config and throw it in a fzf selector for editing
function dots() {
	cat ~/.config/shallow-backup.conf | jq '.dotfiles' | jq -r '.[]' | fzf --bind "enter:execute(nvim ~/{})"
}

# backup-dots [COMMIT MESSAGE]
function backup-dots() {
	echo "Backing up..."
	(
	shallow-backup -no_splash -dotfiles -separate_dotfiles_repo;
	cd "$HOME/shallow-backup/dotfiles/" || exit
	git add .

	# If no commit message is provided, open vim.
	# Otherwise, commit with the provided message
	commit_msg="$1"
	if [ -z "$commit_msg" ] ; then
		git commit --verbose
	else
		git commit -m "$commit_msg"
	fi
	git push
	)
}

# END Dotfiles }}}

# Shortcuts {{{

# Credit: https://github.com/alichtman/dotfiles/blob/master/.zfunctions

# Make a directory and cd into it.
function mk() {
	mkdir "$1" && cd "$1" || exit;
}

# Copy file contents to clipboard
function copy() {
	pbcopy < "$1"
}

function cheat() {
	curl cheat.sh/$1
}

# Prettier diffs
function pdiff() {
	diff -u $1 $2 | diff-so-fancy
}

# END Shortcuts }}}

# tmux {{{

# tm - create new tmux session, or switch to existing one. Works from within tmux too. (@bag-man)
# `tm` will allow you to select your tmux session via fzf.
# `tm irc` will attach to the irc session (if it exists), else it will create it.

tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# END tmux }}}

# Everything above this line is stolen, everything below is original
# Everything below this line also will only work on macOS (mostly)

# Sound Stuff {{{

# volume needs to be [0,100] in set of integers
function set_volume {
	osascript -e "set volume output volume $1"
}

function mute_vol {
	mutestate=$(osascript -e "output muted of (get volume settings)")
	if $mutestate == "true"; then
		osascript -e 'set volume output muted false'; echo 'Volume Unmuted'
	else osascript -e 'set volume output muted true'; echo 'Volume Muted'
	fi
}

# END Sound Stuff }}}

# Ansiweather Forecast {{{

# I didn't like that I couldn't display the current weather and the forecast in
# different ways, so I scripted a way to do it.
# Also, sed on macOS is different than other sed implementations, so it looks
# a bit funky.
function forecast() {
	ansiweather -F | sed 's/:/:\
   /' | sed 's/|/\
   /g'
}

# END Ansiweather Forecast }}}

# Pretty CSV Viewer {{{

function prettycsv() {
  cat $1 | sed 's/,/ ,/g' | column -t -s, | bat
}

# END Pretty CSV Viewer }}}

# vim: set filetype=zsh foldmethod=marker:
